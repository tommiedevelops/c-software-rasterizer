17/08/25

* successfully removed pixel.* modules which sped up program significantly. it's now running at minimum 50fps whereas before
it was around 5fps. 
* getting rid of the mallocs each frame dramatically sped up the program!
* now just need to implement barycentric coords again to rasterize the triangles properly
* also need to implement zbuffer to cull backfaces

19/08/25
* spent a while trying to debug zbuffer stuff. got stuck because i don't know exact position of camera (pos z inf or neg z inf?)
* eventually got someting working but it appears to chop the bunny in half (probably something to do with negative values)
* need to debug further. demo: https://drive.google.com/file/d/1_DxiqoNhu3OlH_KBBLPmDgHHxaBPGjX8/view?usp=drive_link

22/08/25
* there are some visual artifacts on the 3D render. I used a very simple lighting model to flat shade the .obj. 
* The artifacts include random horizontal and vertical lines. Will debug today. demo: https://drive.google.com/file/d/1bPZyXsM5UkKR6BHqA6qJ0xTAO5pDQ1xs/view?usp=drive_link
* ok i fixed the artifacts. i now want to have look at texturing the bunny. i want to spend some time researching and understanding how 3D objects are usually textured in memory.

24/08/24
* there are two main things to work on from here. fragment shader / textures / material and perspective correction. 
* the latter requires studying the maths a bit more deeply - going into the various vector spaces and the relevant transforms
* the former requires understanding textures, fragment shaders and materials better
* I've decided to focus on perspective correction

25/08/25
* today, I will focus on completing the perspective correction algorithm.
* today, wrote notes on linear/affine transformations and homogenous coordinates as well as clipping
* would be good to have a directory in the repository containing all of my study notes written in LaTeX / md except i haven't designed a workflow for that just yet.

26/08/25
* still focusing on implementing perspective projection* (not correction lol). I'm still spending time understanding the concepts.
* I've decided to include an AABB in struct Camera that matches Vulcan's canonical view volume. (Just so I have something to work with)
* I have decided to focus on deriving the Transform matrix first which converts vertices from Model space into World Space.
* The transform matrix is composed of the scale, rotation and translation operations (which themselves are matrices)

27/08/25
* My goal today is to implement the Model, View and Projection matrices as well as Viewport matrix
* I'm also thinking about how this repository will look as a finished product. I would like to write brief LaTeX pdf outlining the projct structure and the main concepts
* I would also like to have some cloud repository that stores clean .obj files that can be used.

28/08/25
* completed quaternion module and composed translation, rotation and scale matrices into the model matrix. however, result is very buggy. need to debug 
* first clue is probably the dodgy (struct Vec3f*) cast that I do onto the struct Vec4f* because I couldn't be bothered re-writing my rasterizer. Once I finish all the matrices, I won't need to re-write the rasterizer though so I'll probably just try to debug this workaround.

29/09/25
* Currently I'm debugging get_model_matrix by writing tests for each of the Transform matrices
* I think I need to VERY explicit with my coordinate axes. By convention, in View Space AND Screen Space: into the camera = positive z. the 'down' direction is positive y. the 'right' direction in positive x. This is with respect to the Camera, so imagine you are looking through the camera / screen. 
* I successfully debugged it by added some temporary lines of code to convert the Vec4f* into a Vec3f*. 
* It seems to work when I apply the model matrix altogether. I haven't really tested scale and translation matrices visually though. 
* There appears to be some weird shearing and scaling when I apply the rotation matrix alogn the x and z axes. Maybe to do with normalization issues? Need to investigate further.
 
30/08/25
* Quaternion Maths and, to be honest, rotation maths is still very confusing for me. It would be beneficial for me to do a review + some practice questions

01/09/25
* The rotations are still a bit buggy - there's a weird shearing happening with x and z rotations but I need to move on. Hopefully it resolves itself sometime in the future
* Based on my testing, it seems like scale and translation are working as expected but because I am renormalizing the vertices separetly after applying the model matrix, I'm eliminating the changes I made. I should be able to see the results after I implement the View, Projection and Viewport matrices. So I can probably move on now to implmenting the View and Projection matrice
*I'm sure I've said this already but for this project, I am enforcing this coordinate frame w.r.t the screen. +X = right, +Y = up, -Z = forward. With this convention QUAT_IDENTITY is looking toward -Z. 
* Started working on view matrix. Currently writing mat4_inverse. Need to do a bit of research but apparently inverse for affine orthonormal is straightforward. Although tests are not passing so either the implementation is wrong or there's a bug.

02/09/25
* Today I ran into the issue of no inheritance in C. I want get_model_matrix to take a GameObject as a parameter so it is clean (simialar to how get_view_matrix() takes a Camera as a parameter. However, as part of get_view_matrix() i need to use get_model_matrix() on the Camera object. Now, if camera could inherit from GameObject this wouldn't be an issue but since we are coding in C, I cannot do that. So I'm looking at some ways I can work around it now.
* Tried again to fix the strange stretching with rotations especially notable when rotating around the z axis - still with no luck 

03/09/25
* Looked into text rendering today but it is surprisingly very difficult. Use this YT video for reference if you decide to do it in the future: https://www.youtube.com/watch?v=ltNTI9m_Vg0
* The main question for today is 'how do I test that the projection matrix is working?' and 'how does the projection matrix work?'. I think it would be best if I derived the projection matrix myself so I can understand it fully.

04/09/25
* I've decided that the canonical view volume for this project to be -1 <= x <= 1, -1 <= y <= y, 0 <= z <= 1 in order to avoid pesky negative numbers

05/09/25
* I've more or less implemented the projection and viewport matrices (deriving the relationship for z is tricky and I dont FULLY get it but its done).
* Currently I'm calculating lighting based on screen-space coordinates which is obviously incorrect. I need to calculate lighting based on world space coordinates so I've gotta figure out how to do that.
* Today, I successfully finished the perpsective projection matrix (Geez that was hard). Took me about 10 hours of debugging today. As the the gameObject approaches the camera though, it gets really laggy and crashes the program (stack overflow). Not sure why. Will create an issue and look into it in the future.

06/09/25
* Today, I want to start working on implementing textures in the renderer. I think that includes lighting, skybox and floor as well
* I also want to implement a simple character controller so I can move the camera around. I think I need to debug the camera a big (I don't think I'm actually frustum culling lol)

07/09/25
* I hacked away at the issue from yesterday. It's fixed but I don't know why. I'll just leave it for now. 
* Gonna try implement a simple character controller for now
* just testing my git commits from my mac as well

23/09/25
* I've decided to keep the scope of this project to to create a 'scrappy' software rasterizer that has a flat layout. I've begun refactoring the project into a more polished App/Core architecture, however I feel as though it would be most beneficial to continue this work  in C++.
* In the future, I'll refactor this project into a full 3D renderer but for now I will keep the scope small.
* I just want to implement simple textures, material, lighting, shadows and that sort of thing and I'll be alright with that.
* The complicated SceneManager stuff can be left for the future C++ project.
* was able to implement basic materials and textures. though textures not perspective correct.
